version: 2.1

executors:
  standard:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.11-rc-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:

  configure-environment:
    description: Create .env file with environment variables
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert migrations given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            echo "Reverting Migrations: << parameters.Workflow_ID >> "
            SUCCESS=$(curl "https://kvdb.io/3iu2eo512VqAaNCmcrbnkA//migration_<<parameters.Workflow_ID>>")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:

  build-frontend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
        
  test-frontend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: test front-end
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: audit front-end
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  scan-backend:
    executor: standard
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: audit back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Deploy back-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Deploy front-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      
      - attach_workspace:
          at: .
      
      - add_ssh_keys:
          fingerprints: ["3b:62:e3:62:6b:10:2e:d3:f6:e9:7e:37:38:59:a3:e8"]

      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      
      - configure-environment

      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml   
      
      - destroy-environment

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - configure-environment

      - run:
          name: Run migrations
          command: |
            pwd
            cd backend
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/3iu2eo512VqAaNCmcrbnkA/migration_${CIRCLE_WORKFLOW_ID:0:7}  \
                -d '1'
            else
              curl https://kvdb.io/3iu2eo512VqAaNCmcrbnkA/migration_${CIRCLE_WORKFLOW_ID:0:7}  \
                -d '0'
            fi

      - destroy-environment

  deploy-frontend:
    executor: aws
    steps:
      - checkout
      
      - run:
          name: Install dependencies 
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs    

      - attach_workspace:
          at: .

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist

      - revert-migrations
      - destroy-environment

  deploy-backend:
    executor: standard
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["3b:62:e3:62:6b:10:2e:d3:f6:e9:7e:37:38:59:a3:e8"]
      
      - attach_workspace:
          at: .

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            apt update
            apt add --upgrade bash
            apt add --update ansible
            apt add openssh-client
            apt add --no-cache tar npm gzip curl gcompat
            apt add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
                 
      - configure-environment

      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build

      - run:
          name: Create backend artefact
          command: |
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .

      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
